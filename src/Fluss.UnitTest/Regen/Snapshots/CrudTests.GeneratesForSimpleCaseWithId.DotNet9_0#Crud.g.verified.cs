//HintName: Crud.g.cs
// <auto-generated/>

#nullable enable

using System;
using System.Runtime.CompilerServices;

namespace TestNamespace
{
    public partial class TestCrud
    {
        public partial record Aggregate : global::Fluss.Aggregates.AggregateRoot<int>
        {
            public int Test { get; init; } = 23;
            public int Test2 { get; init; } = 42;

            public static async global::System.Threading.Tasks.Task<Aggregate> Create(global::Fluss.IWriteUnitOfWork unitOfWork, Commands.TestCrudCreate command)
            {
                var id = new int(global::System.Guid.NewGuid());
                var aggregate = await unitOfWork.GetAggregate<Aggregate, int>(id);
                await aggregate.Apply(new Events.TestCrudCreated(
                    id,
                    command.Test,
                    command.Test2
                ));
                return aggregate;
            }

            public async global::System.Threading.Tasks.Task Change(Commands.TestCrudChange command)
            {
                if (this.Test != command.Test)
                {
                    await Apply(new Events.TestCrudTestChanged(Id, command.Test));
                }
                if (this.Test2 != command.Test2)
                {
                    await Apply(new Events.TestCrudTest2Changed(Id, command.Test2));
                }
            }

            protected override Aggregate When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudTestChanged testCrudTestChanged when testCrudTestChanged.Id == Id => this with { Test = testCrudTestChanged.Test },
                    Events.TestCrudTest2Changed testCrudTest2Changed when testCrudTest2Changed.Id == Id => this with { Test2 = testCrudTest2Changed.Test2 },
                    Events.TestCrudCreated created when created.Id == Id => this with {
                        Test = created.Test,
                        Test2 = created.Test2,
                        Exists = true
                    },
                    Events.TestCrudDeleted deleted when deleted.Id == Id => this with { Exists = false },
                    _ => this,
                };
            }
        }

        public partial record ReadModel : global::Fluss.ReadModel.ReadModelWithKey<int>
        {
            public int Test { get; init; } = 23;
            public int Test2 { get; init; } = 42;
            public bool Exists { get; init; }

            protected override ReadModel When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudTestChanged testCrudTestChanged when testCrudTestChanged.Id == Id => this with { Test = testCrudTestChanged.Test },
                    Events.TestCrudTest2Changed testCrudTest2Changed when testCrudTest2Changed.Id == Id => this with { Test2 = testCrudTest2Changed.Test2 },
                    Events.TestCrudCreated created when created.Id == Id => this with {
                        Test = created.Test,
                        Test2 = created.Test2,
                        Exists = true
                    },
                    Events.TestCrudDeleted deleted when deleted.Id == Id => this with { Exists = false },
                    _ => this,
                };
            }
        }

        public partial record AllIds : global::Fluss.ReadModel.RootReadModel
        {
            public global::System.Collections.Immutable.ImmutableHashSet<int> Ids { get; init; } = global::System.Collections.Immutable.ImmutableHashSet<int>.Empty;

            protected override AllIds When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudCreated created => this with { Ids = Ids.Add(created.Id) },
                    Events.TestCrudDeleted deleted => this with { Ids = Ids.Remove(deleted.Id) },
                    _ => this
            };
        }
    }

    [global::Fluss.Regen.Selector]
    public static global::System.Threading.Tasks.ValueTask<ReadModel> GetTestCrud(global::Fluss.IUnitOfWork unitOfWork, int id)
    {
        return unitOfWork.GetReadModel<ReadModel, int>(id);
    }

    [global::Fluss.Regen.Selector]
    public static async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IReadOnlyList<ReadModel>> GetAllTestCruds(global::Fluss.IUnitOfWork unitOfWork)
    {
        var allIds = await unitOfWork.GetReadModel<AllIds>();
        return await unitOfWork.GetMultipleReadModels<ReadModel, int>(allIds.Ids);
    }

    public static partial class Commands
    {
        public record TestCrudCreate(
            int Test,
            int Test2
        );
        public record TestCrudChange(
            int Id,
            int Test,
            int Test2
        );
    }

    public static partial class Events
    {
        public record TestCrudCreated(
            int Id,
            int Test,
            int Test2
        ) : global::Fluss.Events.Event;
        public record TestCrudTestChanged(
            int Id,
            int Test
        ) : global::Fluss.Events.Event;
        public record TestCrudTest2Changed(
            int Id,
            int Test2
        ) : global::Fluss.Events.Event;
        public record TestCrudDeleted(
            int Id
        ) : global::Fluss.Events.Event;
    }
}
}
