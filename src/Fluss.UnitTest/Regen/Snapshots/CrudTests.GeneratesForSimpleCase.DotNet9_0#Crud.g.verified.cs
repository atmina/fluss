//HintName: Crud.g.cs
// <auto-generated/>

#nullable enable

using System;
using System.Runtime.CompilerServices;

namespace TestNamespace
{
    public partial class TestCrud
    {
        public partial record Aggregate : global::Fluss.Aggregates.AggregateRoot
        {
            public int Test { get; init; }
            public int Test2 { get; init; }

            public async global::System.Threading.Tasks.Task Change(Commands.TestCrudChange command)
            {
                if (this.Test != command.Test)
                {
                    await Apply(new Events.TestCrudTestChanged(command.Test));
                }
                if (this.Test2 != command.Test2)
                {
                    await Apply(new Events.TestCrudTest2Changed(command.Test2));
                }
            }

            protected override Aggregate When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudTestChanged testCrudTestChanged => this with { Test = testCrudTestChanged.Test },
                    Events.TestCrudTest2Changed testCrudTest2Changed => this with { Test2 = testCrudTest2Changed.Test2 },
                    _ => this,
                };
            }
        }

        public partial record ReadModel : global::Fluss.ReadModel.RootReadModel
        {
            public int Test { get; init; }
            public int Test2 { get; init; }

            protected override ReadModel When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudTestChanged testCrudTestChanged => this with { Test = testCrudTestChanged.Test },
                    Events.TestCrudTest2Changed testCrudTest2Changed => this with { Test2 = testCrudTest2Changed.Test2 },
                    _ => this,
                };
            }
        }

        [global::Fluss.Regen.Selector]
        public static global::System.Threading.Tasks.ValueTask<ReadModel> GetTestCrud(global::Fluss.IUnitOfWork unitOfWork)
        {
            return unitOfWork.GetReadModel<ReadModel>();
        }

        public static partial class Commands
        {
            public record TestCrudChange(
                int Test,
                int Test2
            );
        }

        public static partial class Events
        {
            public record TestCrudTestChanged(
                int Test
            ) : global::Fluss.Events.Event;
            public record TestCrudTest2Changed(
                int Test2
            ) : global::Fluss.Events.Event;
        }
    }
}
