//HintName: Crud.g.cs
// <auto-generated/>

#nullable enable

using System;
using System.Runtime.CompilerServices;

namespace TestNamespace
{
    public partial class TestCrud
    {
        public partial record Aggregate : global::Fluss.Aggregates.AggregateRoot<global::System.Guid>
        {

            public static async global::System.Threading.Tasks.Task<Aggregate> Create(global::Fluss.IWriteUnitOfWork unitOfWork, Commands.TestCrudCreate command)
            {
                var id = global::System.Guid.NewGuid();
                var aggregate = await unitOfWork.GetAggregate<Aggregate, global::System.Guid>(id);
                await aggregate.Apply(new Events.TestCrudCreated(
                    id
                ));
                return aggregate;
            }

            public async global::System.Threading.Tasks.Task Change(Commands.TestCrudChange command)
            {
            }

            protected override Aggregate When(global::Fluss.Events.EventEnvelope envelope)
            {
                return (envelope.Event switch
                {
                    Events.TestCrudCreated created when created.Id == Id => this with {
                        Exists = true
                    },
                    Events.TestCrudDeleted deleted when deleted.Id == Id => this with { Exists = false },
                    _ => this,
                }).ExtendWhen(envelope);
            }
        }

        public partial record ReadModel : global::Fluss.ReadModel.ReadModelWithKey<global::System.Guid>
        {
            public bool Exists { get; init; }

            protected override ReadModel When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudCreated created when created.Id == Id => this with {
                        Exists = true
                    },
                    Events.TestCrudDeleted deleted when deleted.Id == Id => this with { Exists = false },
                    _ => this,
                };
            }
        }

        public partial record AllIds : global::Fluss.ReadModel.RootReadModel
        {
            public global::System.Collections.Immutable.ImmutableHashSet<global::System.Guid> Ids { get; init; } = global::System.Collections.Immutable.ImmutableHashSet<global::System.Guid>.Empty;

            protected override AllIds When(global::Fluss.Events.EventEnvelope envelope)
            {
                return envelope.Event switch
                {
                    Events.TestCrudCreated created => this with { Ids = Ids.Add(created.Id) },
                    Events.TestCrudDeleted deleted => this with { Ids = Ids.Remove(deleted.Id) },
                    _ => this
            };
        }
    }

    [global::Fluss.Regen.Selector]
    public static global::System.Threading.Tasks.ValueTask<ReadModel> GetTestCrud(global::Fluss.IUnitOfWork unitOfWork, global::System.Guid id)
    {
        return unitOfWork.GetReadModel<ReadModel, global::System.Guid>(id);
    }

    [global::Fluss.Regen.Selector]
    public static async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IReadOnlyList<ReadModel>> GetAllTestCruds(global::Fluss.IUnitOfWork unitOfWork)
    {
        var allIds = await unitOfWork.GetReadModel<AllIds>();
        return await unitOfWork.GetMultipleReadModels<ReadModel, global::System.Guid>(allIds.Ids);
    }

    public static partial class Commands
    {
        public record TestCrudCreate(

        );
        public record TestCrudChange(
            global::System.Guid Id
        );
    }

    public static partial class Events
    {
        public record TestCrudCreated(
            global::System.Guid Id
        ) : global::Fluss.Events.Event;
        public record TestCrudDeleted(
            global::System.Guid Id
        ) : global::Fluss.Events.Event;
    }
}
}
